1. Boolean Parenthesization Problem
(https://www.geeksforgeeks.org/dynamic-programming-set-37-boolean-parenthesization-problem/)
======================

Given a boolean expression with following symbols

Symbols
'T' ---> true
'F' ---> false

Operators
---------
&, |, ^


Let T(i,j) represent number of ways to parenthesize symbols between i and j (inclusive), such that
subexpression evaluates to true

T(i,j) = Sigma(k=i,j-1)

       when operator = &
            T(i,k) * T(k+1,j)
when        operator = |
            Total(i,k) * Total(k+1, j) - F(i,k)*F(k+1,j)
        when operator = ^
             T(i,k)*F(k+1,j) + F(i,k)*T(k+1,j)

Total(i,j) = T(i,j) + F(i,j)


F(i,j) = Sigma(k=i,j-1)

       when operator = &
            Total(i,k) * Total(k+1,j) - T(i,k) * T(k+1,j)
            when operator = |
            F(i,k)*F(k+1,j)
            when operator = ^
            T(i,k)*T(k+1,j) +F(i,k)*F(k+1,j)

Base cases:
T(i,i) = 1, if symbol[i] = 'T'
T(i,i) = 0, if symbol[i] = 'F'

F(i,i) = 1, if symobl[i] = 'F'
F(i,i) = 0, if symbol[i] = 'T'

public class Solution
{
// returns count of all possible
// parenthesizations that lead to result true for a boolean
// expression with symbols like true
// and false and operators like &, |, and ^ filled between symbols

        static int countParenthe(char[] symbol, char[] operator, int n)
        int[][] F = new int[n][n];
        int[][] T = new int[n][n];

        // fill diagonal entriesfirst
        // all diagonal entries in T[i][i]
        // are 1 if symbol[i] is T, and F[i][i] = 1, if symbol[i] is F
        for (int i = 0; i < n; i++) {
            T[i][i] = symbol[i] == 'T' ? 1 : 0;
            F[i][i] = symbol[i] == 'F' ? 1 : 0;
        }

        // now fill T[i][i+1], T[i][i+2], T[i][i+3] in order
        // and F[i][i+1], F[i][i+2], F[i][i+3] in order

        for (int gap = 1; gap < n; gap++) {
            for (int i = 0, j = gap; j < n; i++,j++) {
                    T[i][j] = 0;
                    F[i][j] = 0;

            for (int g = 0; g < gap; g++) {
                    int k = i + g;

                    int tik = T[i][k] + F[i][k];
                    int tkj = T[k+1][j] + F[k+1][j];

                    char c = oper[k];
                    if (c == '&') {
                       T[i][j] += T[i][k] * T[k+1][j];
                       F[i][j] += (tik * tkj - T[i][k] * T[k+1][j]);
                    } else if (c == '|') {
                      T[i][j] += (tik *tkj - F[i][k] * F[k+1][j]);
                      F[i][j] += F[i][k] * F[k+1][j];
                    } else if (c == '^') {
                      T[i][j] += (T[i][k] * F[k+1][j] + F[i][k] * T[k+1][j]);
                      F[i][j] += (T[i][k] * T[k+1][j] + F[i][k] * F[k+1][j]);
                    }

                }
            }
        }

return T[0][n-1];
}
