• Super Easy Problems in the UVa Online Judge (solvable in under 7 minutes)
x UVa 00272 - TEX Quotes (replace all double quotes to TEX() style quotes)
x UVa 01124 - Celebrity Jeopardy (LA 2681, just echo/re-print the input again)
<<<<<<< HEAD
UVa 10550 - Combination Lock (simple, do as asked)
UVa 11044 - Searching for Nessy (one liner code/formula exists)
=======
x UVa 10550 - Combination Lock (simple, do as asked)
x UVa 11044 - Searching for Nessy (one liner code/formula exists)
>>>>>>> 12ba0569e57fc81ff3f9bf7932f61f6df77e539f
UVa 11172 - Relational Operators * (ad hoc, very easy, one liner)
UVa 11364 - Parking (linear scan to get l & r, answer = 2 ∗ (r − l))
UVa 11498 - Division of Nlogonia * (just use if-else statements)
UVa 11547 - Automatic Answer (a one liner O(1) solution exists)
UVa 11727 - Cost Cutting * (sort the 3 numbers and get the median)
UVa 12250 - Language Detection (LA 4995, KualaLumpur10, if-else check)
UVa 12279 - Emoogle Balance (simple linear scan)
UVa 12289 - One-Two-Three (just use if-else statements)
UVa 12372 - Packing for Holiday (just check if all L, W, H ≤ 20)
UVa 12403 - Save Setu (straightforward)
UVa 12577 - Hajj-e-Akbar (straightforward)

• Easy (just a bit harder than the super easy ones)
UVa 00621 - Secret Research (case analysis for only 4 possible outputs)
UVa 10114 - Loansome Car Buyer * (just simulate the process)
UVa 10300 - Ecological Premium (ignore the number of animals)
UVa 10963 - The Swallowing Ground (for two blocks to be mergable, the
gaps between their columns must be the same)
UVa 11332 - Summing Digits (simple recursions)
UVa 11559 - Event Planning * (one linear pass)
UVa 11679 - Sub-prime (check if after simulation all banks have ≥ 0 reserve)
UVa 11764 - Jumping Mario (one linear scan to count high+low jumps)
UVa 11799 - Horror Dash * (one linear scan to find the max value)
UVa 11942 - Lumberjack Sequencing (check if input is sorted asc/descending)
UVa 12015 - Google is Feeling Lucky (traverse the list twice)
UVa 12157 - Tariff Plan (LA 4405, KualaLumpur08, compute and compare)
UVa 12468 - Zapping (easy; there are only 4 possibilities)
UVa 12503 - Robot Instructions (easy simulation)
UVa 12554 - A Special ... Song (simulation)
IOI 2010 - Cluedo (use 3 pointers)
IOI 2010 - Memory (use 2 linear pass)

• Medium: One Notch Above Easy (may take 15-30 minutes, but not too hard)
UVa 00119 - Greedy Gift Givers (simulate give and receive process)
UVa 00573 - The Snail * (simulation, beware of boundary cases!)
UVa 00661 - Blowing Fuses (simulation)
UVa 10141 - Request for Proposal * (solvable with one linear scan)
UVa 10324 - Zeros and Ones (simplify using 1D array: change counter)
UVa 10424 - Love Calculator (just do as asked)
UVa 10919 - Prerequisites? (process the requirements as the input is read)
UVa 11507 - Bender B. Rodriguez ... * (simulation, if-else)
UVa 11586 - Train Tracks (TLE if brute force, find the pattern)
UVa 11661 - Burger Time? (linear scan)
UVa 11683 - Laser Sculpture (one linear pass is enough)
UVa 11687 - Digits (simulation; straightforward)
UVa 11956 - Brain**** (simulation; ignore ‘.’)
UVa 12478 - Hardest Problem ... (try one of the eight names)
IOI 2009 - Garage (simulation)
IOI 2009 - POI (sort)

1.4 The Ad Hoc Problems

• Game (Card)
UVa 00162 - Beggar My Neighbour (card game simulation; straightforward)
UVa 00462 - Bridge Hand Evaluator * (simulation; card)
UVa 00555 - Bridge Hands (card game)
UVa 10205 - Stack ’em Up (card game)
UVa 10315 - Poker Hands (tedious problem)
UVa 10646 - What is the Card? * (shuffle cards with some rule and
then get certain card)
UVa 11225 - Tarot scores (another card game)
UVa 11678 - Card’s Exchange (actually just an array manipulation problem)
UVa 12247 - Jollo * (interesting card game; simple, but requires good logic to get all test cases correct)

• Game (Chess)
UVa 00255 - Correct Move (check the validity of chess moves)
UVa 00278 - Chess * (ad hoc, chess, closed form formula exists)
UVa 00696 - How Many Knights * (ad hoc, chess)
UVa 10196 - Check The Check (ad hoc chess game, tedious)
UVa 10284 - Chessboard in FEN * (FEN = Forsyth-Edwards Notation is a standard notation for describing board positions in a chess game)
UVa 10849 - Move the bishop (chess)
UVa 11494 - Queen (ad hoc, chess)

• Game (Others), Easier
UVa 00340 - Master-Mind Hints (determine strong and weak matches)
UVa 00489 - Hangman Judge * (just do as asked)
UVa 00947 - Master Mind Helper (similar to UVa 340)
UVa 10189 - Minesweeper * (simulate Minesweeper, similar to UVa 10279)
UVa 10279 - Mine Sweeper (a 2D array helps, similar to UVa 10189)
UVa 10409 - Die Game (just simulate the die movement)
UVa 10530 - Guessing Game (use a 1D flag array)
UVa 11459 - Snakes and Ladders * (simulate it, similar to UVa 647)
UVa 12239 - Bingo (try all 90 2 pairs, see if all numbers in [0..N] are there)

• Game (Others), Harder (more tedious)
UVa 00114 - Simulation Wizardry (simulation of pinball machine)
UVa 00141 - The Spot Game (simulation, pattern check)
UVa 00220 - Othello (follow the game rules, a bit tedious)
UVa 00227 - Puzzle (parse the input, array manipulation)
UVa 00232 - Crossword Answers (complex array manipulation problem)
UVa 00339 - SameGame Simulation (follow problem description)
UVa 00379 - HI-Q (follow problem description)
UVa 00584 - Bowling * (simulation, games, reading comprehension)
UVa 00647 - Chutes and Ladders (childhood board game, also see UVa 11459)
UVa 10363 - Tic Tac Toe (check validity of Tic Tac Toe game, tricky)
UVa 10443 - Rock, Scissors, Paper * (2D arrays manipulation)
UVa 10813 - Traditional BINGO * (follow the problem description)
UVa 10903 - Rock-Paper-Scissors ... (count win+losses, output win average)

• Palindrome
UVa 00353 - Pesky Palindromes (brute force all substring)
UVa 00401 - Palindromes * (simple palindrome check)
UVa 10018 - Reverse and Add (ad hoc, math, palindrome check)
UVa 10945 - Mother Bear * (palindrome)
UVa 11221 - Magic Square Palindrome * (we deal with a matrix)
UVa 11309 - Counting Chaos (palindrome check)

• Anagram
UVa 00148 - Anagram Checker (uses backtracking)
UVa 00156 - Ananagram * (easier with algorithm::sort)
UVa 00195 - Anagram * (easier with algorithm::next permutation)
UVa 00454 - Anagrams * (anagram)
UVa 00630 - Anagrams (II) (ad hoc, string)
UVa 00642 - Word Amalgamation (go through the given small dictionary for the list of possible anagrams)
UVa 10098 - Generating Fast, Sorted ... (very similar to UVa 195)

• Interesting Real Life Problems, Easier
UVa 00161 - Traffic Lights * (this is a typical situation on the road)
UVa 00187 - Transaction Processing (an accounting problem)
UVa 00362 - 18,000 Seconds Remaining (typical file download situation)
UVa 00637 - Booklet Printing * (application in printer driver software)
UVa 00857 - Quantiser (MIDI, application in computer music)
UVa 10082 - WERTYU (this typographical error happens to us sometimes)
UVa 10191 - Longest Nap (you may want to apply this to your own schedule)
UVa 10528 - Major Scales (music knowledge is in the problem description)
UVa 10554 - Calories from Fat (are you concerned with your weights?)
UVa 10812 - Beat the Spread * (be careful with boundary cases!)
UVa 11530 - SMS Typing (handphone users encounter this problem everyday)
UVa 11945 - Financial Management (a bit output formatting)
UVa 11984 - A Change in Thermal Unit (F ◦ to C ◦ conversion and vice versa)
UVa 12195 - Jingle Composing (count the number of correct measures)
UVa 12555 - Baby Me (one of the first question asked when a new baby is born; requires a bit of input processing)

• Interesting Real Life Problems, Harder (more tedious)
UVa 00139 - Telephone Tangles (calculate phone bill; string manipulation)
UVa 00145 - Gondwanaland Telecom (similar nature with UVa 139)
UVa 00333 - Recognizing Good ISBNs (note: this problem has ‘buggy’ test
data with blank lines that potentially cause lots of ‘Presentation Errors’)
UVa 00346 - Getting Chorded (musical chord, major/minor)
UVa 00403 - Postscript * (emulation of printer driver, tedious)
UVa 00447 - Population Explosion (life simulation model)
UVa 00448 - OOPS (tedious ‘hexadecimal’ to ‘assembly language’ conversion)
UVa 00449 - Majoring in Scales (easier if you have a musical background)
UVa 00457 - Linear Cellular Automata (simplified ‘game of life’ simulation; similar idea with UVa 447; explore the Internet for that term)
UVa 00538 - Balancing Bank Accounts (the problem’s premise is quite true)
UVa 00608 - Counterfeit Dollar * (classical problem)
UVa 00706 - LC-Display (what we see in old digital display)
UVa 01061 - Consanguine Calculations * (LA 3736 - WorldFinals Tokyo07, consanguine = blood; this problem asks possible combinations of blood types and Rh factor; solvable by trying all eight possible blood + Rh types with the information given in the problem description)
UVa 10415 - Eb Alto Saxophone Player (about musical instruments)
UVa 10659 - Fitting Text into Slides (typical presentation programs do this)
UVa 11223 - O: dah, dah, dah (tedious morse code conversion)
UVa 11743 - Credit Check (Luhn’s algorithm to check credit card numbers; search the Internet to learn more)
UVa 12342 - Tax Calculator (tax computation can be tricky indeed)

• Time
UVa 00170 - Clock Patience (simulation, time)
UVa 00300 - Maya Calendar (ad hoc, time)
UVa 00579 - Clock Hands * (ad hoc, time)
UVa 00893 - Y3K * (use Java GregorianCalendar; similar to UVa 11356)
UVa 10070 - Leap Year or Not Leap ... (more than ordinary leap years)
UVa 10339 - Watching Watches (find the formula)
UVa 10371 - Time Zones (follow the problem description)
UVa 10683 - The decadary watch (simple clock system conversion)
UVa 11219 - How old are you? (be careful with boundary cases!)
UVa 11356 - Dates (very easy if you use Java GregorianCalendar)
UVa 11650 - Mirror Clock (some mathematics required)
UVa 11677 - Alarm Clock (similar idea with UVa 11650)
UVa 11947 - Cancer or Scorpio * (easier with Java GregorianCalendar)
UVa 11958 - Coming Home (be careful with ‘past midnight’)
UVa 12019 - Doom’s Day Algorithm (Gregorian Calendar; get DAY OF WEEK)
UVa 12136 - Schedule of a Married Man (LA 4202, Dhaka08, check time)
UVa 12148 - Electricity (easy with Gregorian Calendar; use method ‘add’ to
add one day to previous date and see if it is the same as the current date)
UVa 12439 - February 29 (inclusion-exclusion; lots of corner cases; be careful)
UVa 12531 - Hours and Minutes (angles between two clock hands)

• ‘Time Waster’ Problems
UVa 00144 - Student Grants (simulation)
UVa 00214 - Code Generation (just simulate the process; be careful with subtract (-), divide (/), and negate (@), tedious)
UVa 00335 - Processing MX Records (simulation)
UVa 00337 - Interpreting Control ... (simulation, output related)
UVa 00349 - Transferable Voting (II) (simulation)
UVa 00381 - Making the Grade (simulation)
UVa 00405 - Message Routing (simulation)
UVa 00556 - Amazing * (simulation)
UVa 00603 - Parking Lot (simulate the required process)
UVa 00830 - Shark (very hard to get AC, one minor error = WA)
UVa 00945 - Loading a Cargo Ship (simulate the given cargo loading process)
UVa 10033 - Interpreter (adhoc, simulation)
UVa 10134 - AutoFish (must be very careful with details)
UVa 10142 - Australian Voting (simulation)
UVa 10188 - Automated Judge Script (simulation)
UVa 10267 - Graphical Editor (simulation)
UVa 10961 - Chasing After Don Giovanni (tedious simulation)
UVa 11140 - Little Ali’s Little Brother (ad hoc)
UVa 11717 - Energy Saving Micro... (tricky simulation)
UVa 12060 - All Integer Average * (LA 3012, Dhaka04, output format)
UVa 12085 - Mobile Casanova * (LA 2189, Dhaka06, watch out for PE)
UVa 12608 - Garbage Collection (simulation with several corner cases)
